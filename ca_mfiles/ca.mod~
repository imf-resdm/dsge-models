/*
 * fixed the log problem. ALL IN LEVELS!!
 * 
 * fixed the adjustment costs problem using risk premium function
 *
 * risk premium is introduced as the asymetric form (Kim and Ruge-Murcia 2009)
 * 
 * copyright: Bin Li, bli2@imf.org
 *
 */  

// Endogenous variables: c , k, s , d ,f, invk, invs, lamda, etak, etas, ynon, koil


var c k s invk invs d f r ca tb ynon y vv gov AC_s AC_k  govh yoil ch T; 


// Exogenous variables: technology level 

varexo yoildata Adj Abarshock Tdata;

// varexo u;

// Parameters declaration and calibration

parameters theta_k theta_s gamma delta_k delta_s beta kappa e_k e_s phi_k phi_s rbar psi rho1 rho2 rho3 omega dbar g_n g_a g xi Abar
            yoil_0 f_0 r_0 d_0 invk_0 invs_0 k_0 s_0 c_0 ca_0 gov_0 coef  To;

            
load params.mat;   
for i=1:length(M_.params)
    parameter_name = M_.param_names(i,:);
    eval(['M_.params(i)  = ' parameter_name ' ;']);
end;   

// Equilibrium conditions (Euler equations)

model;

// 1. FOC to d(t)
0 = (c^(-gamma)-beta*(1+g)*xi*c(+1)^(-gamma)) - beta*(c(+1)^(-gamma)-beta*(1+g)*xi*c(+2)^(-gamma))*(1+r+coef*d*(psi/(rho1^2))*(rho1*exp(rho1*(d-dbar-omega*vv))-rho2)); 



// 2. FOC to k(t)
0 = -(c^(-gamma)-beta*(1+g)*xi*c(+1)^(-gamma))/e_k + beta*((c(+1)^(-gamma)-beta*(1+g)*xi*c(+2)^(-gamma))/e_k)*(1-delta_k) + beta*(c(+1)^(-gamma)-beta*(1+g)*xi*c(+2)^(-gamma))*(Abar*Abarshock)*theta_k*k^(theta_k-1)*s^(theta_s) - (1/(1+g))*(c^(-gamma)-beta*(1+g)*xi*c(+1)^(-gamma))*phi_k*(k/k(-1)-1) - beta*(c(+1)^(-gamma)-beta*(1+g)*xi*c(+2)^(-gamma))*(phi_k/2)*(k(+1)/k-1)^2 + beta*(c(+1)^(-gamma)-beta*(1+g)*xi*c(+2)^(-gamma))*phi_k*(k(+1)/k-1)*(k(+1)/k);

// 3. FOC to s(t)
0 = -(c^(-gamma)-beta*(1+g)*xi*c(+1)^(-gamma))/e_s + beta*((c(+1)^(-gamma)-beta*(1+g)*xi*c(+2)^(-gamma))/e_s)*(1-delta_s) + beta*(c(+1)^(-gamma)-beta*(1+g)*xi*c(+2)^(-gamma))*(Abar*Abarshock)*theta_s*s^(theta_s-1)*k^(theta_k) - (1/(1+g))*(c^(-gamma)-beta*(1+g)*xi*c(+1)^(-gamma))*phi_s*(s/s(-1)-1) - beta*(c(+1)^(-gamma)-beta*(1+g)*xi*c(+2)^(-gamma))*(phi_s/2)*(s(+1)/s-1)^2 + beta*(c(+1)^(-gamma)-beta*(1+g)*xi*c(+2)^(-gamma))*phi_s*(s(+1)/s-1)*(s(+1)/s);


// 4. BC 

0 = yoil+ynon + d*(1+g)-(1+r(-1))*d(-1)-ch - invk -invs - govh - AC_s - AC_k +T ;

// 0 = yoil+ynon + d*(1+g_n+g_a)-(1+r(-1))*d(-1)-c - invk -invs - gov - AC_s - AC_k +(1+g_n+g_a)*koil-(1+rbar)*koil(-1);

// 5. production 
0 = ynon - (Abar*Abarshock)*(k(-1)^(theta_k))*(s(-1)^(theta_s)) ;

// 6. private investment 
0 = k*(1+g)-(1-delta_k)*k(-1)-e_k*invk;

// 7. public investment 
0 = s*(1+g)-(1-delta_s)*s(-1)-e_s*invs;

// 8. interest rate 
//0= rbar + (psi/rho)*(exp(rho*((d-dbar)-omega*(vv-vvvalue)))-1)-r;
r= rbar+(psi/(rho1^2))*(exp(rho1*(d-dbar-omega*vv))-rho2*(d-dbar-omega*vv)-rho3);

// 8. tb
0= y-ch-invk-invs-govh-AC_k-AC_s-tb;

// 10. foreign asset position
0 = f+d; 

// 11. ca
// 0 = f*(1+g_n)*(1+g_a) - f(-1) + koil*(1+g_n+g_a) - koil(-1) -ca;
//ca = f*(1+g_n+g_a) -f(-1);

ca = tb+T-r(-1)*d(-1);

// 12. total GDP
0 = y -yoil -ynon;

//13. NPV of oil
0 = yoil+vv(+1)*(1+g)/(1+rbar)-vv;

//14. Adjustment costs on k
AC_k=(phi_k/2)*(k/k(-1)-1)^2*k(-1);

// 15. Adjustment costs on s
AC_s=(phi_s/2)*(s/s(-1)-1)^2*s(-1);


// 16. Government expenditure
0 = (c^(-gamma)-beta*(1+g)*xi*c(+1)^(-gamma)) - kappa*(gov^(-gamma)-beta*(1+g)*xi*gov(+1)^(-gamma)) ;

// 17. Habit private consumption

0=c-(ch-xi*ch(-1));

// 18. Habit public consumption

0=gov-(govh-xi*govh(-1));

// 19. oil

yoil = yoildata*y;

// 20. Adjustment Variable (Transfers)

T = Tdata*y;

end;  


// Steady state (analytical solved)
options_.maxit = itermax;

initval;

//k = 0.1*kvalue;
//s = 0.25*svalue;
s = s_0;
k =k_0;

ynon = Abar*(k^(theta_k))*(s^(theta_s));

yoil = yoil_0;
//ynon = ynon_0;
//y=y_0;
y = ynon+yoil;
f = f_0*y;
r = r_0;
invk = 0.8*invk_0*y;
invs = 0.8*invs_0*y;
vv =vvvalue;
AC_k = 0.2*invk_0*y;
AC_s = 0.2*invs_0*y;
ca=ca_0*y;
d = d_0*y_0; 

govh =gov_0*y;
gov =(1-xi)*govh;
ch= c_0*y;

c = (1-xi)*ch;
Abarshock =1;
T=To*y;
tb = ca+r*d-T;

end;



// Check that this is indeed the steady state

//steady(solve_algo=2);
// maxit_=20;

// options_.maxit_ = 30;

// check;
%resid(1);

// Check the Blanchard-Kahn conditions
//check;

// Declare a positive technological shock in period 1

// Deterministic simulation of the model for 200 periods
simul(periods=1000); 

// Display the path of consumption and capital
// c=exp(vc);
// k=exp(vk);
// rplot vc ;
// rplot vk ;
// rplot vs ;
// rplot ynon ; 
// rplot invk ;
// rplot invs ;
// rplot f;
// rplot r;
// rplot ca;
// rplot tb;
// rplot c;
// rplot k;
